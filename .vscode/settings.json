{
  // Make sure GEN=ninja is set for terminals if you still need the 'make' wrapper sometimes
  // (Choose the correct platform: osx, linux, or windows)
  "terminal.integrated.env.osx": {
      "GEN": "ninja"
  },
  "terminal.integrated.env.linux": {
      "GEN": "ninja"
  },

  // 1. Set the CMake Source Directory:
  "cmake.sourceDirectory": "${workspaceFolder}/duckdb",

  // 2. Pass Configuration Arguments to CMake:
  "cmake.configureArgs": [
      "-DUCKDB_EXTENSION_CONFIGS=${workspaceFolder}",
      "-DCMAKE_CXX_STANDARD=20",
      "-DCMAKE_CXX_STANDARD_REQUIRED=TRUE",
      
      // Set the macOS SDK path (homebrew clang)
      "-DCMAKE_OSX_SYSROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX15.4.sdk",

      // Disable deprecated literal operator warning for duckdb files
      "-DCMAKE_CXX_FLAGS=-Wno-deprecated-literal-operator",

  ],

  "cmake.buildDirectory": "${workspaceFolder}/build",

  // 4. Ensure Compile Commands are Exported (for clangd):
  //    The log shows this is already passed via the command line, but setting it here
  //    is good practice if your kit/preset doesn't enforce it.
  "cmake.configureSettings": {
      "CMAKE_EXPORT_COMPILE_COMMANDS": "TRUE"
  },
  "[cpp]": {
    "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd"
  },
  "[c]": {
    "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd"
  },
  "editor.formatOnSave": true,
  "editor.formatOnType": true,

  "clangd.fallbackFlags": [
    "-std=c++20"
  ],
  "clangd.arguments": [
    "--compile-commands-dir=build"
  ]
}
