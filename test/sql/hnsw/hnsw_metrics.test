require lm_diskann

require noforcestorage

statement ok
CREATE TABLE t1 (vec FLOAT[3]);

statement ok
INSERT INTO t1 SELECT array_value(a,b,c) FROM range(1,10) ra(a), range(1,10) rb(b), range(1,10) rc(c);


# Test creating indexes with different vector metrics
statement ok
CREATE INDEX my_ip_idx ON t1 USING HNSW (vec) WITH (metric = 'ip');

statement ok
CREATE INDEX my_cos_idx ON t1 USING HNSW (vec) WITH (metric = 'cosine');

statement ok
CREATE INDEX my_l2sq_idx ON t1 USING HNSW (vec) WITH (metric = 'l2sq');

# Make sure we get the index scan plan on the index matching the distance measurement
query II
EXPLAIN SELECT array_negative_inner_product(vec, [1,2,3]::FLOAT[3]) as x FROM t1 ORDER BY x LIMIT 3;
----
physical_plan	<REGEX>:.*HNSW_INDEX_SCAN.*my_ip_idx.*

query II
EXPLAIN SELECT array_cosine_distance(vec, [1,2,3]::FLOAT[3]) as x FROM t1 ORDER BY x LIMIT 3;
----
physical_plan	<REGEX>:.*HNSW_INDEX_SCAN.*my_cos_idx.*

query II
EXPLAIN SELECT array_distance(vec, [1,2,3]::FLOAT[3]) as x FROM t1 ORDER BY x LIMIT 3;
----
physical_plan	<REGEX>:.*HNSW_INDEX_SCAN.*my_l2sq_idx.*