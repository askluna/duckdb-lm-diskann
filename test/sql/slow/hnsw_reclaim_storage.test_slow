require lm_diskann

load __TEST_DIR__/hnsw_reclaim_space.db

statement ok
SET hnsw_enable_experimental_persistence = true;

statement ok
CREATE TABLE vecs AS SELECT i as i, array_value(i, i, i)::FLOAT[3] as vec FROM range(1000000) tbl(i);

statement ok
CHECKPOINT;

# save the block count and the used block count before index creation

statement ok
CREATE TABLE blocks_tbl AS SELECT total_blocks, used_blocks FROM pragma_database_size();

# index creation

statement ok
CREATE INDEX idx ON vecs USING HNSW (vec);

query II
SELECT i, vec FROM vecs WHERE i = 500000;
----
500000	[500000.0, 500000.0, 500000.0]

statement ok
CHECKPOINT;

# save the total block count and the used block count after creating an index
statement ok
CREATE TABLE blocks_idx AS SELECT total_blocks, used_blocks FROM pragma_database_size();

# dropping the index

statement ok
DROP INDEX idx;

statement ok
CHECKPOINT;

# save the total block count after dropping the index
statement ok
CREATE TABLE blocks_drop_idx AS SELECT total_blocks, used_blocks FROM pragma_database_size();

statement ok
CREATE INDEX idx ON vecs USING HNSW (vec);

statement ok
CHECKPOINT;

query II
SELECT i, vec FROM vecs WHERE i = 500000;
----
500000	[500000.0, 500000.0, 500000.0]

# now loop and always DROP INDEX, then recreate (reusing the same blocks)

loop i 0 4

statement ok
DROP INDEX idx;

statement ok
CHECKPOINT;

# we added another table, but dropping the index should get us back
# to more or less the block count that we had before creating the index
query I
SELECT current.total_blocks < blocks_drop_idx.total_blocks + 4
FROM pragma_database_size() AS current, blocks_drop_idx;
----
1

statement ok
CREATE INDEX idx ON vecs USING HNSW (vec);

statement ok
CHECKPOINT;

# we reclaim blocks, so we stay within some +4 blocks of our previous block count
query I
SELECT current.total_blocks < blocks_idx.total_blocks + 5
FROM pragma_database_size() current, blocks_idx;
----
1

query II
SELECT i, vec FROM vecs WHERE i = 500000;
----
500000	[500000.0, 500000.0, 500000.0]

endloop